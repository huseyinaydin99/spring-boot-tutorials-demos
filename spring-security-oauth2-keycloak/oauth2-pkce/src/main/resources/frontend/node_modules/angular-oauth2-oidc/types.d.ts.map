{"version":3,"file":"types.d.ts","sources":["types.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * Additional options that can be passed to tryLogin.\r\n */\r\nexport declare class LoginOptions {\r\n    /**\r\n     * Is called, after a token has been received and\r\n     * successfully validated.\r\n     *\r\n     * Deprecated:  Use property ``events`` on OAuthService instead.\r\n     */\r\n    onTokenReceived?: (receivedTokens: ReceivedTokens) => void;\r\n    /**\r\n     * Hook, to validate the received tokens.\r\n     *\r\n     * Deprecated:  Use property ``tokenValidationHandler`` on OAuthService instead.\r\n     */\r\n    validationHandler?: (receivedTokens: ReceivedTokens) => Promise<any>;\r\n    /**\r\n     * Called when tryLogin detects that the auth server\r\n     * included an error message into the hash fragment.\r\n     *\r\n     * Deprecated:  Use property ``events`` on OAuthService instead.\r\n     */\r\n    onLoginError?: (params: object) => void;\r\n    /**\r\n     * A custom hash fragment to be used instead of the\r\n     * actual one. This is used for silent refreshes, to\r\n     * pass the iframes hash fragment to this method, and\r\n     * is also used by popup flows in the same manner.\r\n     * This can be used with code flow, where is must be set\r\n     * to a hash symbol followed by the querystring. The\r\n     * question mark is optional, but may be present following\r\n     * the hash symbol.\r\n     */\r\n    customHashFragment?: string;\r\n    /**\r\n     * Set this to true to disable the oauth2 state\r\n     * check which is a best practice to avoid\r\n     * security attacks.\r\n     * As OIDC defines a nonce check that includes\r\n     * this, this can be set to true when only doing\r\n     * OIDC.\r\n     */\r\n    disableOAuth2StateCheck?: boolean;\r\n    /**\r\n     * Normally, you want to clear your hash fragment after\r\n     * the lib read the token(s) so that they are not displayed\r\n     * anymore in the url. If not, set this to true. For code flow\r\n     * this controls removing query string values.\r\n     */\r\n    preventClearHashAfterLogin?: boolean;\r\n    /**\r\n     * Set this for code flow if you used a custom redirect Uri\r\n     * when retrieving the code. This is used internally for silent\r\n     * refresh and popup flows.\r\n     */\r\n    customRedirectUri?: string;\r\n}\r\n/**\r\n * Defines the logging interface the OAuthService uses\r\n * internally. Is compatible with the `console` object,\r\n * but you can provide your own implementation as well\r\n * through dependency injection.\r\n */\r\nexport declare abstract class OAuthLogger {\r\n    abstract debug(message?: any, ...optionalParams: any[]): void;\r\n    abstract info(message?: any, ...optionalParams: any[]): void;\r\n    abstract log(message?: any, ...optionalParams: any[]): void;\r\n    abstract warn(message?: any, ...optionalParams: any[]): void;\r\n    abstract error(message?: any, ...optionalParams: any[]): void;\r\n}\r\n/**\r\n * Defines a simple storage that can be used for\r\n * storing the tokens at client side.\r\n * Is compatible to localStorage and sessionStorage,\r\n * but you can also create your own implementations.\r\n */\r\nexport declare abstract class OAuthStorage {\r\n    abstract getItem(key: string): string | null;\r\n    abstract removeItem(key: string): void;\r\n    abstract setItem(key: string, data: string): void;\r\n}\r\nexport declare class MemoryStorage implements OAuthStorage {\r\n    private data;\r\n    getItem(key: string): string;\r\n    removeItem(key: string): void;\r\n    setItem(key: string, data: string): void;\r\n}\r\n/**\r\n * Represents the received tokens, the received state\r\n * and the parsed claims from the id-token.\r\n */\r\nexport declare class ReceivedTokens {\r\n    idToken: string;\r\n    accessToken: string;\r\n    idClaims?: object;\r\n    state?: string;\r\n}\r\n/**\r\n * Represents the parsed and validated id_token.\r\n */\r\nexport interface ParsedIdToken {\r\n    idToken: string;\r\n    idTokenClaims: object;\r\n    idTokenHeader: object;\r\n    idTokenClaimsJson: string;\r\n    idTokenHeaderJson: string;\r\n    idTokenExpiresAt: number;\r\n}\r\n/**\r\n * Represents the response from the token endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\r\n */\r\nexport interface TokenResponse {\r\n    access_token: string;\r\n    id_token: string;\r\n    token_type: string;\r\n    expires_in: number;\r\n    refresh_token: string;\r\n    scope: string;\r\n    state?: string;\r\n}\r\n/**\r\n * Represents the response from the user info endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#UserInfo\r\n */\r\nexport interface UserInfo {\r\n    sub: string;\r\n    [key: string]: any;\r\n}\r\n/**\r\n * Represents an OpenID Connect discovery document\r\n */\r\nexport interface OidcDiscoveryDoc {\r\n    issuer: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    token_endpoint_auth_methods_supported: string[];\r\n    token_endpoint_auth_signing_alg_values_supported: string[];\r\n    userinfo_endpoint: string;\r\n    check_session_iframe: string;\r\n    end_session_endpoint: string;\r\n    jwks_uri: string;\r\n    registration_endpoint: string;\r\n    scopes_supported: string[];\r\n    response_types_supported: string[];\r\n    acr_values_supported: string[];\r\n    response_modes_supported: string[];\r\n    grant_types_supported: string[];\r\n    subject_types_supported: string[];\r\n    userinfo_signing_alg_values_supported: string[];\r\n    userinfo_encryption_alg_values_supported: string[];\r\n    userinfo_encryption_enc_values_supported: string[];\r\n    id_token_signing_alg_values_supported: string[];\r\n    id_token_encryption_alg_values_supported: string[];\r\n    id_token_encryption_enc_values_supported: string[];\r\n    request_object_signing_alg_values_supported: string[];\r\n    display_values_supported: string[];\r\n    claim_types_supported: string[];\r\n    claims_supported: string[];\r\n    claims_parameter_supported: boolean;\r\n    service_documentation: string;\r\n    ui_locales_supported: string[];\r\n    revocation_endpoint: string;\r\n}\r\n"]}